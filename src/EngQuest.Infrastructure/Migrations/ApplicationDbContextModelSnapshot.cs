// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using EngQuest.Infrastructure;

#nullable disable

namespace EngQuest.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EngQuest.Domain.Lessons.Exercises.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RusPhrase")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("rus_phrase");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.LessonExercise", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.HasKey("LessonId", "ExerciseId")
                        .HasName("pk_lesson_exercises");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("ix_lesson_exercises_exercise_id");

                    b.ToTable("lesson_exercises", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "users:read"
                        });
                });

            modelBuilder.Entity("EngQuest.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Registered"
                        });
                });

            modelBuilder.Entity("EngQuest.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("EngQuest.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Adjectives.Adjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_adjectives");

                    b.ToTable("adjectives", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Adverbs.Adverb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_adverbs");

                    b.ToTable("adverbs", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Cities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.ComparisonAdjectives.ComparisonAdjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComparativeForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("comparative_form");

                    b.Property<string>("SuperlativeForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("superlative_form");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_comparison_adjectives");

                    b.ToTable("comparison_adjectives", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Compounds.Compound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_compounds");

                    b.ToTable("compounds", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Determiners.Determiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_determiners");

                    b.ToTable("determiners", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.LetterNumbers.LetterNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_letter_numbers");

                    b.ToTable("letter_numbers", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.ModalVerbs.ModalVerb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullNegativeForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("full_negative_form");

                    b.Property<string>("ShortNegativeForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_negative_form");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_modal_verbs");

                    b.ToTable("modal_verbs", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Nouns.Noun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PluralForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("plural_form");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_nouns");

                    b.ToTable("nouns", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Prepositions.Preposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_prepositions");

                    b.ToTable("prepositions", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.PrimaryVerbs.PrimaryVerb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PastForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("past_form");

                    b.Property<string>("PastParticipleForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("past_participle_form");

                    b.Property<string>("PresentParticipleForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("present_participle_form");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.Property<string>("ThirdPersonForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("third_person_form");

                    b.HasKey("Id")
                        .HasName("pk_primary_verbs");

                    b.ToTable("primary_verbs", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Pronouns.Pronoun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_pronouns");

                    b.ToTable("pronouns", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.QuestionWords.QuestionWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_question_words");

                    b.ToTable("question_words", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.Verbs.Verb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsIrregularVerb")
                        .HasColumnType("boolean")
                        .HasColumnName("is_irregular_verb");

                    b.Property<string>("PastForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("past_form");

                    b.Property<string>("PastParticipleForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("past_participle_form");

                    b.Property<string>("PresentParticipleForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("present_participle_form");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text");

                    b.Property<string>("ThirdPersonForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("third_person_form");

                    b.HasKey("Id")
                        .HasName("pk_verbs");

                    b.ToTable("verbs", (string)null);
                });

            modelBuilder.Entity("EngQuest.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.Exercises.Exercise", b =>
                {
                    b.OwnsMany("EngQuest.Domain.Lessons.Exercises.Word", "Words", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ExerciseId")
                                .HasColumnType("integer")
                                .HasColumnName("exercise_id");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("number");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("type");

                            b1.HasKey("Id")
                                .HasName("pk_words");

                            b1.HasIndex("ExerciseId")
                                .HasDatabaseName("ix_words_exercise_id");

                            b1.ToTable("words", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId")
                                .HasConstraintName("fk_words_exercises_exercise_id");
                        });

                    b.Navigation("Words");
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.Lesson", b =>
                {
                    b.OwnsMany("EngQuest.Domain.Lessons.Scores.Score", "Scores", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("LessonId")
                                .HasColumnType("integer")
                                .HasColumnName("lesson_id");

                            b1.Property<int>("UserId")
                                .HasColumnType("integer")
                                .HasColumnName("user_id");

                            b1.HasKey("Id")
                                .HasName("pk_scores");

                            b1.HasIndex("LessonId")
                                .HasDatabaseName("ix_scores_lesson_id");

                            b1.ToTable("scores", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonId")
                                .HasConstraintName("fk_scores_lessons_lesson_id");

                            b1.OwnsOne("EngQuest.Domain.Lessons.Scores.Rating", "Rating", b2 =>
                                {
                                    b2.Property<int>("ScoreId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<int>("CorrectNumber")
                                        .HasColumnType("integer")
                                        .HasColumnName("rating_correct_number");

                                    b2.Property<float>("Rate")
                                        .HasColumnType("real")
                                        .HasColumnName("rating_rate");

                                    b2.Property<int>("WrongNumber")
                                        .HasColumnType("integer")
                                        .HasColumnName("rating_wrong_number");

                                    b2.HasKey("ScoreId");

                                    b2.ToTable("scores");

                                    b2.WithOwner()
                                        .HasForeignKey("ScoreId")
                                        .HasConstraintName("fk_scores_scores_id");
                                });

                            b1.Navigation("Rating")
                                .IsRequired();
                        });

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.LessonExercise", b =>
                {
                    b.HasOne("EngQuest.Domain.Lessons.Exercises.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_exercises_exercises_exercise_id");

                    b.HasOne("EngQuest.Domain.Lessons.Lesson", null)
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_exercises_lessons_lesson_id");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("EngQuest.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("EngQuest.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("EngQuest.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("EngQuest.Domain.Vocabulary.PrimaryVerbs.PrimaryVerb", b =>
                {
                    b.OwnsMany("EngQuest.Domain.Vocabulary.ModalVerbs.FullNegativeForm", "FullNegativeForms", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("PrimaryVerbId")
                                .HasColumnType("integer")
                                .HasColumnName("primary_verb_id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("text");

                            b1.HasKey("Id")
                                .HasName("pk_full_negative_forms");

                            b1.HasIndex("PrimaryVerbId")
                                .HasDatabaseName("ix_full_negative_forms_primary_verb_id");

                            b1.ToTable("full_negative_forms", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PrimaryVerbId")
                                .HasConstraintName("fk_full_negative_forms_primary_verbs_primary_verb_id");
                        });

                    b.OwnsMany("EngQuest.Domain.Vocabulary.ModalVerbs.ShortNegativeForm", "ShortNegativeForms", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("PrimaryVerbId")
                                .HasColumnType("integer")
                                .HasColumnName("primary_verb_id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("text");

                            b1.HasKey("Id")
                                .HasName("pk_short_negative_forms");

                            b1.HasIndex("PrimaryVerbId")
                                .HasDatabaseName("ix_short_negative_forms_primary_verb_id");

                            b1.ToTable("short_negative_forms", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PrimaryVerbId")
                                .HasConstraintName("fk_short_negative_forms_primary_verbs_primary_verb_id");
                        });

                    b.OwnsMany("EngQuest.Domain.Vocabulary.PrimaryVerbs.AdditionalForm", "AdditionalForms", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("PrimaryVerbId")
                                .HasColumnType("integer")
                                .HasColumnName("primary_verb_id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("text");

                            b1.HasKey("Id")
                                .HasName("pk_additional_forms");

                            b1.HasIndex("PrimaryVerbId")
                                .HasDatabaseName("ix_additional_forms_primary_verb_id");

                            b1.ToTable("additional_forms", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PrimaryVerbId")
                                .HasConstraintName("fk_additional_forms_primary_verbs_primary_verb_id");
                        });

                    b.Navigation("AdditionalForms");

                    b.Navigation("FullNegativeForms");

                    b.Navigation("ShortNegativeForms");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("EngQuest.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_role_roles_id");

                    b.HasOne("EngQuest.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_user_users_id");
                });

            modelBuilder.Entity("EngQuest.Domain.Lessons.Lesson", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
